{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from quspin.operators import hamiltonian\n",
    "from quspin.basis import spin_basis_1d\n",
    "from quspin.basis import spinless_fermion_basis_1d\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import itertools\n",
    "plt.rcParams['figure.figsize'] = [10, 8]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define Constants/Helpers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = 4\n",
    "N_filled = N // 2\n",
    "P_neg1 = 1\n",
    "t = -0.5\n",
    "g = 1\n",
    "m = 1\n",
    "PBC = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def stringbox(lst, caption):\n",
    "    return caption + \"-\" * (100 - len(caption))+\"\\n\" + str(lst) + \"\\n\" + \"-\" * 100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spin Basis Simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Static couplings:-----------------------------------------------------------------------------------\n",
      "[['+-', [[0.5, 0, 1], [0.5, 1, 2], [0.5, 2, 3], [-0.5, 3, 0]]], ['+-', [[0.5, 1, 0], [0.5, 2, 1], [0.5, 3, 2], [-0.5, 0, 3]]], ['+-', [[1, 0, 0], [-1, 1, 1], [1, 2, 2], [-1, 3, 3]]], ['z', [[1, 0]]], ['zz', [[1, 0, 1]]], ['zzz', [[-1, 0, 1, 2]]], ['zzzz', [[-1, 0, 1, 2, 3]]]]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Hermiticity check passed!\n",
      "Symmetry checks passed!\n",
      "Particle conservation check passed!\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "spin_basis = spin_basis_1d(N, pauli=-1, Nup=N_filled)\n",
    "static_terms = []\n",
    "dynamic_terms = []\n",
    "\n",
    "### Hopping term\n",
    "L = (N if PBC else N-1)\n",
    "hop_coupling = [[-t, i, (i+1) % N] for i in range(L)]\n",
    "hop_coupling_dag = [[-t, (i+1) % N, i] for i in range(L)]\n",
    "if PBC and N_filled % 2 == 0:\n",
    "    hop_coupling[-1][0] = -hop_coupling[-1][0]\n",
    "    hop_coupling_dag[-1][0] = -hop_coupling_dag[-1][0]\n",
    "static_terms += [[\"+-\", hop_coupling]]\n",
    "static_terms += [[\"+-\", hop_coupling_dag]]\n",
    "\n",
    "### Mass term\n",
    "mass_coupling = [[m * (-1) ** i, i, i] for i in range(N)]\n",
    "static_terms += [[\"+-\", mass_coupling]]\n",
    "\n",
    "### E-field term\n",
    "E_link_parity = lambda x : -1 if (x % 4) < 2 else 1\n",
    "for i in range(N):\n",
    "    E_coupling = [P_neg1 * -g * E_link_parity(i)] + list(range(i+1))\n",
    "    static_terms += [[\"z\" * (i+1), [E_coupling]]]\n",
    "\n",
    "print(stringbox(static_terms, \"Static couplings:\"))\n",
    "### Plotting spectrum\n",
    "H = hamiltonian(static_terms, dynamic_terms, basis=spin_basis, dtype=np.float64)\n",
    "spin_eigvals = H.eigvalsh()\n",
    "plt.plot(spin_eigvals, \".\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fermion Basis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Static couplings:-----------------------------------------------------------------------------------\n",
      "[['+-', [[0.5, 0, 1], [0.5, 1, 2], [0.5, 2, 3], [0.5, 3, 0]]], ['+-', [[0.5, 1, 0], [0.5, 2, 1], [0.5, 3, 2], [0.5, 0, 3]]], ['+-', [[1, 0, 0], [-1, 1, 1], [1, 2, 2], [-1, 3, 3]]], ['z', [[2, 0]]], ['zz', [[4, 0, 1]]], ['zzz', [[-8, 0, 1, 2]]], ['zzzz', [[-16, 0, 1, 2, 3]]]]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Hermiticity check passed!\n",
      "Symmetry checks passed!\n",
      "Particle conservation check passed!\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fermion_basis = spinless_fermion_basis_1d(L=N, Nf=N_filled)\n",
    "static_terms = []\n",
    "dynamic_terms = []\n",
    "\n",
    "### Hopping term\n",
    "L = (N if PBC else N-1)\n",
    "hop_coupling = [[-t, i, (i+1) % N] for i in range(L)]\n",
    "hop_coupling_dag = [[-t, (i+1) % N, i] for i in range(L)]\n",
    "static_terms += [[\"+-\", hop_coupling]]\n",
    "static_terms += [[\"+-\", hop_coupling_dag]]\n",
    "\n",
    "### Mass term\n",
    "mass_coupling = [[m * (-1) ** i, i, i] for i in range(N)]\n",
    "static_terms += [[\"+-\", mass_coupling]]\n",
    "\n",
    "### E-field term\n",
    "E_link_parity = lambda x : -1 if (x % 4) < 2 else 1\n",
    "for i in range(N):\n",
    "    E_coupling = [P_neg1 * -g * E_link_parity(i) * 2 ** (i+1)] + list(range(i+1))\n",
    "    static_terms += [[\"z\" * (i+1), [E_coupling]]]\n",
    "\n",
    "print(stringbox(static_terms, \"Static couplings:\"))\n",
    "### Plotting spectrum\n",
    "H = hamiltonian(static_terms, dynamic_terms, basis=fermion_basis, dtype=np.float64)\n",
    "fermion_eigvals = H.eigvalsh()\n",
    "plt.plot(fermion_eigvals, \".\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fermion eigenvalues:--------------------------------------------------------------------------------\n",
      "[-6.20875976 -2.17253501 -2.         -1.83442686  1.6179029   2.59781873]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Spin eigenvalues:-----------------------------------------------------------------------------------\n",
      "[-6.20875976 -2.17253501 -2.         -1.83442686  1.6179029   2.59781873]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Maximum difference between eigenvalues: 0.0\n"
     ]
    }
   ],
   "source": [
    "mdiff = max(fermion_eigvals - spin_eigvals)\n",
    "print(stringbox(fermion_eigvals, \"Fermion eigenvalues:\"))\n",
    "print(stringbox(spin_eigvals, \"Spin eigenvalues:\"))\n",
    "print(\"Maximum difference between eigenvalues:\", mdiff)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
